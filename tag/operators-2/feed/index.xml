<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>operators &#8211; ovi.ro</title>
	<atom:link href="/tag/operators-2/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>ovi.ro</description>
	<lastBuildDate>Sat, 15 Dec 2012 18:00:46 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9</generator>
	<item>
		<title>Operator Precedence</title>
		<link>/php/zce-training/php-basics/operators/operator-precedence/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Sat, 15 Dec 2012 18:00:46 +0000</pubDate>
				<category><![CDATA[Operators]]></category>
		<category><![CDATA[operators]]></category>
		<category><![CDATA[order]]></category>
		<category><![CDATA[precedence]]></category>
		<guid isPermaLink="false">http://0v1.ro/?p=161</guid>

					<description><![CDATA[PHP Operators precedence and exceptions &#8230; <a class="more" href="/php/zce-training/php-basics/operators/operator-precedence/">Read more &#187;</a>]]></description>
										<content:encoded><![CDATA[<p>Like in math: 3 + 4 * 5 = 23 and not 35, in PHP you have an order for interpreting the code.</p>
<table class="with-borders" width="780" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col />
<col />
<col width="248" /> </colgroup>
<tbody>
<tr>
<th>Associativity</th>
<th>Operators</th>
<th width="248">Additional Information</th>
</tr>
<tr>
<td>non-associative</td>
<td>clone new</td>
<td width="248">clone<span> and </span><span>new</span></td>
</tr>
<tr>
<td>left</td>
<td>[</td>
<td width="248"><a href="http://php.net/manual/ro/function.array.php">array()</a></td>
</tr>
<tr>
<td>right</td>
<td>++ &#8212; ~ (int) (float) (string) (array) (object) (bool) @</td>
<td width="248">types<span> and </span><span>increment/decrement</span></td>
</tr>
<tr>
<td>non-associative</td>
<td>instanceof</td>
<td width="248"><a href="http://php.net/manual/ro/language.types.php">types</a></td>
</tr>
<tr>
<td>right</td>
<td>!</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>* / %</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.arithmetic.php">arithmetic</a></td>
</tr>
<tr>
<td>left</td>
<td>+ &#8211; .</td>
<td width="248">arithmetic<span> ?i </span><span>string</span></td>
</tr>
<tr>
<td>left</td>
<td>&lt;&lt; &gt;&gt;</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.bitwise.php">bitwise</a></td>
</tr>
<tr>
<td>non-associative</td>
<td>&lt; &lt;= &gt; &gt;=</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.comparison.php">comparison</a></td>
</tr>
<tr>
<td>non-associative</td>
<td>== != === !== &lt;&gt;</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.comparison.php">comparison</a></td>
</tr>
<tr>
<td>left</td>
<td>&amp;</td>
<td width="248">bitwise<span> ?i </span><span>references</span></td>
</tr>
<tr>
<td>left</td>
<td>^</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.bitwise.php">bitwise</a></td>
</tr>
<tr>
<td>left</td>
<td>|</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.bitwise.php">bitwise</a></td>
</tr>
<tr>
<td>left</td>
<td>&amp;&amp;</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>||</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>? :</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.comparison.php#language.operators.comparison.ternary">ternary</a></td>
</tr>
<tr>
<td>right</td>
<td>= += -= *= /= .= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;= =&gt;</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.assignment.php">assignment</a></td>
</tr>
<tr>
<td>left</td>
<td>and</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>xor</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>or</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>,</td>
<td width="248">many uses</td>
</tr>
</tbody>
</table>
<p>For operators that have the same precedence, the order is specified in the first column.<br />
PHP also knows about <strong>Asociativity</strong>.</p>
<p>Exception:</p>
<pre class="lang:default decode:true"> if (!$a = foo())</pre>
<p>Even if<strong> = </strong>has lower precedence than other operators (<strong>!</strong> here) the return falue of <strong>foo()</strong> is put into <strong>$a</strong>  before the negation</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Operators list</title>
		<link>/php/operators-list/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Thu, 01 Nov 2012 18:01:11 +0000</pubDate>
				<category><![CDATA[Operators]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[PHP Basics]]></category>
		<category><![CDATA[ZCE Training]]></category>
		<category><![CDATA[arithmetic]]></category>
		<category><![CDATA[assignment]]></category>
		<category><![CDATA[bitwise]]></category>
		<category><![CDATA[operators]]></category>
		<category><![CDATA[reference]]></category>
		<guid isPermaLink="false">http://0v1.ro/?p=185</guid>

					<description><![CDATA[PHP operators: arithmetic, assignment, reference, bitwise. &#8230; <a class="more" href="/php/operators-list/">Read more &#187;</a>]]></description>
										<content:encoded><![CDATA[<h3>Arithmetic Operators</h3>
<table class="with-borders">
<thead>
<tr>
<th>Example</th>
<th>Name</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>&#8211;</strong>$a</td>
<td>Negation</td>
<td>Opposite of <strong><var>$a</var></strong>.</td>
</tr>
<tr>
<td>$a <strong>+</strong> $b</td>
<td>Addition</td>
<td>Sum of <strong><var>$a</var></strong> and<strong> <var>$b</var></strong>.</td>
</tr>
<tr>
<td>$a <strong>&#8211;</strong> $b</td>
<td>Subtraction</td>
<td>Difference of <strong><var>$a</var></strong> and <strong><var>$b</var></strong>.</td>
</tr>
<tr>
<td>$a <strong>*</strong> $b</td>
<td>Multiplication</td>
<td>Product of <strong><var>$a</var></strong> and <strong><var>$b</var></strong>.</td>
</tr>
<tr>
<td>$a <strong>/</strong> $b</td>
<td>Division</td>
<td>Quotient of<strong> <var>$a</var></strong> and <strong><var>$b</var></strong>.</td>
</tr>
<tr>
<td>$a <strong>%</strong> $b</td>
<td>Modulus</td>
<td>Remainder of <strong><var>$a</var></strong> divided by <strong><var>$b</var></strong>.</td>
</tr>
</tbody>
</table>
<h3>Assignment Operators</h3>
<pre class="lang:default decode:true">&lt;?php $a = 5; ?&gt;

&lt;?php $a = ($b = 2) + 5;  // $a = 7 ?&gt;

&lt;?php
  $a = 2;
  $a += 3; // sets $a to 5, equivalent to: $a = $a + 5;
  $b = "Hello ";
  $b .= "World!"; // sets $b to "Hello There!", equivalent to  $b = $b . "There!";  ( dot is for contatenation)
?&gt;</pre>
<h3> Assignment by Reference</h3>
<pre class="lang:default decode:true">&lt;?php
  $a = 3;
  $b = &amp;$a; // $b is a reference to $a - changes of $a will apply to $b too
  echo $a . $b;   // prints 33

  $a = 4;
  echo $a . $b;   // prints 44

  class C {}

  $o = &amp;new C;  // as of PHP 5 classes are passed by default by reference
              // as of PHP 5.3 this will throw an E_DEPRECATED error
?&gt;</pre>
<h3> Bitwise Operators</h3>
<table>
<thead>
<tr>
<th>Format</th>
<th>Name</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>$a &amp; $b</code></strong></td>
<td>And</td>
<td>100<strong>1</strong> &amp; 010<strong>1</strong>  = 0001</td>
</tr>
<tr>
<td><strong><code>$a | $b</code></strong></td>
<td>Or (inclusive or)</td>
<td><strong>1</strong>00<strong>1</strong> | 0<strong>1</strong>0<strong>1</strong> = 1101</td>
</tr>
<tr>
<td><strong><code>$a ^ $b</code></strong></td>
<td>Xor (exclusive or)</td>
<td><strong>10</strong>01 ^ <strong>01</strong>01  = 0100</td>
</tr>
<tr>
<td><strong><code>~ $a</code></strong></td>
<td>Not</td>
<td><b>~ 1</b>00<b>1 = 0110</b></td>
</tr>
<tr>
<td><strong><code>$a &lt;&lt; $b</code></strong></td>
<td>Shift left</td>
<td>0010 &lt;&lt; 1 = 0100</td>
</tr>
<tr>
<td><strong><code>$a &gt;&gt; $b</code></strong></td>
<td>Shift right</td>
<td>Shift the bits of <var>$a</var> <var>$b</var> steps to the right (each step means &#8220;divide by two&#8221;)</td>
</tr>
</tbody>
</table>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
