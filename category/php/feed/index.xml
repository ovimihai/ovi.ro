<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>PHP &#8211; ovi.ro</title>
	<atom:link href="/category/php/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>ovi.ro</description>
	<lastBuildDate>Tue, 04 Apr 2017 07:43:30 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9</generator>
	<item>
		<title>Compare strings in PHP</title>
		<link>/php/sadness/compare-strings-in-php/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Tue, 04 Apr 2017 07:43:30 +0000</pubDate>
				<category><![CDATA[Sadness]]></category>
		<category><![CDATA[madness]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[strings]]></category>
		<guid isPermaLink="false">http://ovi.ro/?p=569</guid>

					<description><![CDATA[Just read a comment in the PHP documentation and had another PHP madness moment. It seems you have to be really, really careful when comparing strings that include numbers&#8230; &#160; Command \ PHP Version 7.0.0 &#8211; 7.1.3 5.4.4 &#8211; 5.6.30 &#8230; <a class="more" href="/php/sadness/compare-strings-in-php/">Read more &#187;</a>]]></description>
										<content:encoded><![CDATA[<p>Just read a <a href="http://php.net/manual/en/language.operators.comparison.php#114682">comment</a> in the PHP documentation and had another PHP madness moment.</p>
<p>It seems you have to be really, really careful when comparing strings that include numbers&#8230;</p>
<p>&nbsp;</p>
<table>
<tbody>
<tr>
<td width="800">Command \ PHP Version</td>
<td width="75">7.0.0 &#8211; 7.1.3</td>
<td width="83">5.4.4 &#8211; 5.6.30</td>
<td width="76">5.2.1 &#8211; 5.4.3</td>
</tr>
<tr>
<td>var_dump(&#8216;123&#8217; == &#8216;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 123&#8217;);</td>
<td style="font-weight: 400;"><span style="color: #339966;"><strong>TRUE</strong></span></td>
<td style="font-weight: 400;"><span style="color: #339966;"><strong>TRUE</strong></span></td>
<td style="font-weight: 400;"><span style="color: #339966;"><strong>TRUE</strong></span></td>
</tr>
<tr>
<td>var_dump(&#8216;1e3&#8217; == &#8216;1000&#8217;);</td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
</tr>
<tr>
<td>var_dump(&#8216;+74951112233&#8217; == &#8216;74951112233&#8217;);</td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
</tr>
<tr>
<td>var_dump(&#8216;00000020&#8217; == &#8216;0000000000000000020&#8217;);</td>
<td style="font-weight: 400;"><span style="color: #339966;"><strong>TRUE</strong></span></td>
<td style="font-weight: 400;"><span style="color: #339966;"><strong>TRUE</strong></span></td>
<td style="font-weight: 400;"><span style="color: #339966;"><strong>TRUE</strong></span></td>
</tr>
<tr>
<td>var_dump(&#8216;0X1D&#8217; == &#8217;29E0&#8242;);</td>
<td style="font-weight: 400;"><strong><span style="color: #ff0000;">FALSE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
</tr>
<tr>
<td>var_dump(&#8216;0xafebac&#8217; == &#8216;11529132&#8217;);</td>
<td style="font-weight: 400;"><strong><span style="color: #ff0000;">FALSE</span></strong></td>
<td style="font-weight: 400;"><span style="color: #339966;"><strong>TRUE</strong></span></td>
<td style="font-weight: 400;"><span style="color: #339966;"><strong>TRUE</strong></span></td>
</tr>
<tr>
<td>var_dump(&#8216;0xafebac&#8217; == &#8216;0XAFEBAC&#8217;);</td>
<td style="font-weight: 400;"><strong><span style="color: #ff0000;">FALSE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
</tr>
<tr>
<td>var_dump(&#8216;0xeb&#8217; == &#8216;+235e-0&#8217;);</td>
<td style="font-weight: 400;"><span style="color: #ff0000;"><strong>FALSE</strong></span></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
</tr>
<tr>
<td>var_dump(&#8216;0.235&#8217; == &#8216;+.235&#8217;);</td>
<td style="font-weight: 400;"><span style="color: #339966;"><strong>TRUE</strong></span></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
</tr>
<tr>
<td>var_dump(&#8216;0.2e-10&#8217; == &#8216;2.0E-11&#8217;);</td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #339966;">TRUE</span></strong></td>
</tr>
<tr>
<td>var_dump(&#8216;61529519452809720693702583126814&#8217; == &#8216;61529519452809720000000000000000&#8217;);</td>
<td style="font-weight: 400;"><strong><span style="color: #ff0000;">FALSE</span></strong></td>
<td style="font-weight: 400;"><strong><span style="color: #ff0000;">FALSE</span></strong></td>
<td style="font-weight: 400;"><span style="color: #339966;"><strong>TRUE</strong></span></td>
</tr>
</tbody>
</table>
<p>https://3v4l.org/rop5S</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>PHP switch case after default works normally</title>
		<link>/php/zce-training/php-basics/php-switch-case-after-default-works-normally/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Thu, 25 Feb 2016 13:54:32 +0000</pubDate>
				<category><![CDATA[PHP Basics]]></category>
		<guid isPermaLink="false">http://ovi.ro/?p=485</guid>

					<description><![CDATA[When you put the a case block after the default block the switch will work normally and fallback to the default only after testing all cases. The documentation doesn&#8217;t specify this directly, but there is a note with an example. &#8230; <a class="more" href="/php/zce-training/php-basics/php-switch-case-after-default-works-normally/">Read more &#187;</a>]]></description>
										<content:encoded><![CDATA[<p>When you put the a case block after the default block the switch will work normally and fallback to the default only after testing all cases.<br />
The documentation doesn&#8217;t specify this directly, but there is a note with an example.<br />
Another thing worth mentioning is that switch does loose comparisons, so be careful about 0, false values</p>
<pre class="lang:php decode:true">$a = 3;
switch ($a) {
    case 1: echo 'one'; break;
    case 2: echo 'two'; break;
    default: echo 'four'; break;
    case 3: echo 'three'; break;
}
// outputs 'three'
</pre>
<p><a href="http://ideone.com/DQGUvU" target="_blank" rel="noopener noreferrer">Test yourself on iodine.com</a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>How Tor works</title>
		<link>/php/zce-training/security/how-tor-works/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Fri, 04 Sep 2015 15:12:26 +0000</pubDate>
				<category><![CDATA[Security]]></category>
		<guid isPermaLink="false">http://ovi.ro/?p=475</guid>

					<description><![CDATA[Great photos explaining what is disclosed at each point when doing a request on the web, with or without Tor or HTTPS. The photo is provided by the EFF https://www.eff.org/pages/tor-and-https]]></description>
										<content:encoded><![CDATA[<p>Great photos explaining what is disclosed at each point when doing a request on the web, with or without Tor or HTTPS.<br />
The photo is provided by the EFF <a href="https://www.eff.org/pages/tor-and-https" target="_blank" rel="noopener noreferrer">https://www.eff.org/pages/tor-and-https</a></p>
<p><img src="https://www.eff.org/files/tor-https-3.png" alt="" /></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Strings array access issue</title>
		<link>/php/sadness/strings-array-access-issue/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Thu, 28 May 2015 14:28:06 +0000</pubDate>
				<category><![CDATA[Sadness]]></category>
		<guid isPermaLink="false">http://ovi.ro/?p=466</guid>

					<description><![CDATA[What would you expect for this script to output? error_reporting(E_ALL); ini_set('display_errors',1); $text = "abc"; var_dump(isset($text['key'])); var_dump((bool) $text['key']); Maybe a notice? maybe some false there.. But if you have in mind PHP logic.. you surely know.. So, $text is a string &#8230; <a class="more" href="/php/sadness/strings-array-access-issue/">Read more &#187;</a>]]></description>
										<content:encoded><![CDATA[<p>What would you expect for this script to output?</p>
<pre class="lang:php decode:true">
error_reporting(E_ALL); ini_set('display_errors',1);

$text = "abc";

var_dump(isset($text['key']));
var_dump((bool) $text['key']);
</pre>
<p>Maybe a notice? maybe some false there..<br />
But if you have in mind PHP logic.. you surely know..</p>
<p>So, $text is a string and string characters can be accessed with $text[1] this is &#8220;b&#8221;<br />
Then if you try $text[&#8216;key&#8217;] PHP will typecast your &#8216;key&#8217; to an integer (0) then $text[0] exists!</p>
<p>The second step is simple.. $text[0] is &#8220;a&#8221; and PHP logic again &#8211; any non empty string is true!</p>
<p>Output is:</p>
<pre class="lang:php decode:true">
bool(true);
bool(true);
</pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Foreach with reference</title>
		<link>/php/sadness/foreach-with-reference/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Thu, 28 May 2015 13:17:07 +0000</pubDate>
				<category><![CDATA[Sadness]]></category>
		<guid isPermaLink="false">http://ovi.ro/?p=454</guid>

					<description><![CDATA[If you iterate over an array with &#038; you should unset the value variable after to not modify the array accidentally after. $array = array('a', 'b', 'c', 'd'); foreach($array as $key=>&#038;$value) { if ($key = 3) { // change d &#8230; <a class="more" href="/php/sadness/foreach-with-reference/">Read more &#187;</a>]]></description>
										<content:encoded><![CDATA[<p>If you iterate over an array with &#038; you should unset the value variable after to not modify the array accidentally after.</p>
<pre class="lang:php decode:true">
$array = array('a', 'b', 'c', 'd');

foreach($array as $key=>&$value) {
    if ($key = 3) {
        // change d to x
        $value = 'x';
    }
}
// this will affect the $array to
$value = 'z';
// $array = array('a', 'b', 'c', 'z');
</pre>
<p>Should do like this</p>
<pre class="lang:php decode:true">
$array = array('a', 'b', 'c', 'd');

foreach($array as $key=>&$value) {
    if ($key = 3) {
        // change d to x
        $value = 'x';
    }
}
unset($value);
$value = 'z';  // if you do this accidentally you get a notice but no effect on the array
// $array = array('a', 'b', 'c', 'x');
</pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>PHP echo print question</title>
		<link>/php/sadness/php-echo-print-question/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Tue, 19 May 2015 16:06:17 +0000</pubDate>
				<category><![CDATA[Sadness]]></category>
		<guid isPermaLink="false">http://ovi.ro/?p=435</guid>

					<description><![CDATA[Working with echo or print is very easy in PHP. At the begining it might be harder to understand concatenations or operations order, but after you master them is really easy. But there are some cases where you wonder how &#8230; <a class="more" href="/php/sadness/php-echo-print-question/">Read more &#187;</a>]]></description>
										<content:encoded><![CDATA[<p>Working with echo or print is very easy in PHP.<br />
At the begining it might be harder to understand concatenations or operations order, but after you master them is really easy.<br />
But there are some cases where you wonder how does this work ?!?!</p>
<h2>What does this print?</h2>
<pre class="lang:php decode:true">echo 1 . print(2+3) . 1+2;</pre>
<p>Don&#8217;t rush to conclusions to fast.. Make sure you remember what echo and print do and what is the order of operations.</p>
<p>Hint 1: print also returns after the opration is done<br />
Hint 2: echo and print are language constructs, not functions.</p>
<h2 style="cursor: pointer;" onClick="document.getElementById('echoPrintSolution').style.display = 'block'">Click here to see the solution</h2>
<div id="echoPrintSolution" style="display: none;">
<p>You might not know that print will be executed first, but if you do, that is not enough.<br />
So, the order of operations is:<br />
1. evaluate <span style="color: #ff0000;">2+3</span> = 5<br />
2. evaluate <span style="color: #ff0000;">1+2</span> = 3<br />
3. evaluate print arguments: <span style="color: #ff0000;">5 . 3</span> = 53 &#8211; don&#8217;t forget, print is not a function, is a language construct as echo!<br />
4. will actually print <span style="color: #ff0000;">53</span> and return true<br />
5. evaluate echo arguments: concatenation between <span style="color: #ff0000;">1</span> and <span style="color: #ff0000;">true</span> = 11<br />
6. echoes <span style="color: #ff0000;">11</span></p>
<p>So the result is: <span style="color: #ff0000;">5311</span>
</div>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Regex</title>
		<link>/php/zce-training/strings-patterns/regex/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Sat, 25 Apr 2015 09:19:27 +0000</pubDate>
				<category><![CDATA[Strings & Patterns]]></category>
		<guid isPermaLink="false">http://ovi.ro/?p=421</guid>

					<description><![CDATA[Documentation Cheatsheet: Dave Child, Dzone, RegexOne Tools: (Online) RegExr, Regex101, RagexPal, RegexPlanet, (Offline) Rad Software (free) or RegexBuddy (paid)]]></description>
										<content:encoded><![CDATA[<p><a href="http://www.regular-expressions.info/" target="new" rel="noopener noreferrer">Documentation</a><br />
Cheatsheet: <a href="http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/" target="new" rel="noopener noreferrer">Dave Child</a>, <a href="http://refcardz.dzone.com/refcardz/regular-expressions">Dzone</a>, <a href="http://regexone.com/cheatsheet" target="new" rel="noopener noreferrer">RegexOne</a><br />
Tools: (Online) <a href="http://www.regexr.com/" target="new" rel="noopener noreferrer">RegExr</a>, <a href="https://regex101.com/" target="new" rel="noopener noreferrer">Regex101</a>, <a href="http://regexpal.com/" target="new" rel="noopener noreferrer">RagexPal</a>, <a href="http://www.regexplanet.com/advanced/java/index.html" target="new" rel="noopener noreferrer">RegexPlanet</a>, <br />(Offline) <a href="http://rad-software-regular-expression-designer.software.informer.com/" target="new" rel="noopener noreferrer">Rad Software</a> (free) or <a href="http://www.regexbuddy.com/" target="new" rel="noopener noreferrer">RegexBuddy</a> (paid)</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Zend Certified PHP Engineer Exam</title>
		<link>/php/zce-training/zend-certified-php-engineer-exam/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Sat, 25 Apr 2015 08:39:09 +0000</pubDate>
				<category><![CDATA[ZCE Training]]></category>
		<guid isPermaLink="false">http://ovi.ro/?p=403</guid>

					<description><![CDATA[In a competitive environment as the programming world is this kind of certification can help you differentiate yourself when you are looking for a job. You might want a bigger salary, you want to improve your CV, the certification is &#8230; <a class="more" href="/php/zce-training/zend-certified-php-engineer-exam/">Read more &#187;</a>]]></description>
										<content:encoded><![CDATA[<p>In a competitive environment as the programming world is this kind of certification can help you differentiate yourself when you are looking for a job. You might want a bigger salary, you want to improve your CV, the certification is clearly a big advantage.<br />
Taking the exam will not only help you gain some recognition at work or at interviews, but you will revise your php knowledge and fill the gaps you might have.<br />
If you take the exam you will get a place in the <a href="http://www.zend.com/store/education/certification/yellow-pages.php" target="new" rel="noopener noreferrer">Zend yellow pages</a>, be accepted in their exclusive <a href="https://www.linkedin.com/groups?home=&#038;gid=42193&#038;trk=anet_ug_hm" target="new" rel="noopener noreferrer">LinkedIn group</a> and get a free copy of <a href="http://www.zend.com/en/products/studio" target="new" rel="noopener noreferrer">Zend Studio</a>.</p>
<p>The exam is composed of 70 random questions that vary in their level of difficulty. The questions are now based on PHP 5.5 version and will test one or more concept at a time. You are allowed 90 minutes to answer the questions that will cover the following 10 topic areas:</p>
<ol>
<li><strong><span style="color: #ff0000;">Php basics</span></strong></li>
<li>Data formats and types</li>
<li><span style="color: #ff6600;">Strings</span></li>
<li><span style="color: #ff6600;">Arrays</span></li>
<li>Input / Output</li>
<li><span style="color: #ff6600;">Functions</span></li>
<li><strong><span style="color: #ff0000;">Object-Oriented Programming</span></strong></li>
<li>Databases</li>
<li><strong><span style="color: #ff0000;">Security</span></strong></li>
<li><span style="color: #ff6600;">Web features</span></li>
</ol>
<p>I highlighted with <span style="color: #ff0000;"><strong>red</strong> </span>the most important topics and with <span style="color: #ff6600;">orange</span> the second most important topics. You will have to know all of this areas, being an expert in only a few area will not be enough.</p>
<p>You can buy the exam voucher in the <a href="http://www.zend.com/en/services/certification/php-5-certification" target="new" rel="noopener noreferrer">Zend Shop</a> and schedule your exam in the <a href="http://www.pearsonvue.com/zend/" target="new" rel="noopener noreferrer">Pearson VUE</a> training centers. You should have an test center near you or in a bigger city near you. They ask you for tow forms of identification and they ask to have signature and picture on them (id card, drivers license, credit card should work). In the testing room they provide you some way for you to make any calculations you need (scratch paper or erasable board) and you are not allowed with any device or paper.</p>
<p>There are 3 types of questions: multiple choice with only one right question (most frequent), multiple choice with two or more answers(they say how many) and a free text with simple word/words (no comments, white spaces, explanations allowed). They don&#8217;t penalty you for guessing, but you&#8217;d better mark for review if you are not sure and then get later back on them.</p>
<p>The emphasis is more on analysis, not memorization, but you have to know commonly used elements: common functions, constants, classes, maybe the function arguments order (needle, haystack, etc)</p>
<p>The questions refer to a environment with the recommended PHP configuration, with error_reporting set to E_ALL and display_errors on (unless the questions specifies otherwise). The environment is independent of the operating system and database adapters, you still have to know basic SQL or HTTP.</p>
<p>After the exam you get immediately the pass/fail status and they give you a sheet with feedback on each topic you need to study more just if you fail.</p>
<p>You have a lot of online resources, but first on the list is always the <a href="http://php.net/" target="new" rel="noopener noreferrer">PHP Manual</a>!</p>
<p>Check out this list of topics from <a href="https://bitly.com/bundles/lornajane/3" target="new" rel="noopener noreferrer">Lorna Mitchel</a> and if you want to invest in your training, the <a href="http://www.ucertify.com/?func=load_course&amp;course=200-550" target="new" rel="noopener noreferrer">uCertify 200-550 training</a> is great!<br />
I have <a href="http://ovi.ro/php/zce/">another article</a> with the full topics and some articles about each other<br />
Other unrated sources: <a href="http://www.slideshare.net/luckysher007/php-5-3studyguidev1a" target="new" rel="noopener noreferrer">Study guide</a>, <a href="http://www.slideshare.net/lornajane/zend-certification-preparation-tutorial" target="new" rel="noopener noreferrer">Lorna Mitchell presentation</a><br />
Good luck!</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Variables</title>
		<link>/php/variables/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Sun, 03 Feb 2013 20:42:41 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[PHP Basics]]></category>
		<category><![CDATA[ZCE Training]]></category>
		<category><![CDATA[$this]]></category>
		<category><![CDATA[context]]></category>
		<category><![CDATA[global]]></category>
		<category><![CDATA[scope]]></category>
		<category><![CDATA[superglobal]]></category>
		<category><![CDATA[variable variables]]></category>
		<category><![CDATA[variables]]></category>
		<guid isPermaLink="false">http://ovi.ro/?p=280</guid>

					<description><![CDATA[Variables are preceded in PHP by a dollar sign $ and the rules for naming are: [a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*   or in plain english names of variables can begin with letters or underscores and then you can put other numbers letters and underscores. Letters here &#8230; <a class="more" href="/php/variables/">Read more &#187;</a>]]></description>
										<content:encoded><![CDATA[<p>Variables are preceded in PHP by a dollar sign $ and the rules for naming are: <strong><em>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</em></strong><em>   or in plain english names of variables can begin with letters or underscores and then you can put other numbers letters and underscores. Letters here can include extended <a title="ASCII TABLE" href="http://www.ascii-code.com/" target="_blank" rel="noopener noreferrer">ascii</a> characters from 7F to FF (127 &#8211; 255) so don&#8217;t blame me if you find letters like ç, † or ½</em></p>
<p>When declaring a variable, in PHP you don&#8217;t need to specify a type, it&#8217;s enough to give it a name and assign it a value. $var = &#8220;string value&#8221;;</p>
<p>Variables are <strong>case sensitive</strong> and some variable names are reserved: <strong>$this </strong>( used inside objects)<strong>, $_SERVER, $GLOBALS, $_SESSION, $_COOKIE, $_POST, $_GET, $_REQUEST, $_ENV </strong>(global variables).</p>
<p>When variables are not assigned values they behave as in the table above, but an E_NOTICE error is issued, and it is not recomanded to not properly initialize them or check if they are set with <strong>isset() </strong>function.</p>
<table class="with-borders">
<tbody>
<tr>
<th>Situation</th>
<th>Value</th>
</tr>
<tr>
<td>
<pre class="lang:default decode:true">var_dump($unset_var);</pre>
</td>
<td> <strong>NULL</strong></td>
</tr>
<tr>
<td>
<pre class="lang:default decode:true  crayon-selected">echo($unset_bool ? "true\n" : "false\n");</pre>
</td>
<td> <strong>false</strong></td>
</tr>
<tr>
<td>
<pre class="lang:default decode:true">$unset_str .= 'abc';
var_dump($unset_str);</pre>
</td>
<td><strong> abc</strong>   ( &#8221; concatenated with &#8216;abc&#8217; )</td>
</tr>
<tr>
<td>
<pre class="lang:default decode:true crayon-selected">$unset_int += 25;
var_dump($unset_int);</pre>
</td>
<td> <strong>25</strong>  ( 0+25 )</td>
</tr>
<tr>
<td>
<pre class="lang:default decode:true">$unset_float += 1.25;
var_dump($unset_float);</pre>
</td>
<td><strong> 1.25</strong>  ( 0+ 1.25)</td>
</tr>
<tr>
<td>
<pre class="lang:default decode:true">$unset_arr[3] = "def";
var_dump($unset_arr);</pre>
</td>
<td> <strong>array(1) {  [3]=&gt;  string(3) &#8220;def&#8221; }</strong><br />
adds empty array() with array with element key: 3, value &#8220;def&#8221;</td>
</tr>
<tr>
<td>
<pre class="lang:default decode:true">$unset_obj-&gt;foo = 'bar';
var_dump($unset_obj);</pre>
</td>
<td><strong> object(stdClass)#1 (1) {  [&#8220;foo&#8221;]=&gt;  string(3) &#8220;bar&#8221; }</strong><br />
initializes an stdClass() object and assigns parameter foo the value &#8216;bar&#8217;</td>
</tr>
</tbody>
</table>
<h3>Variable variables</h3>
<p>In PHP you even can have dynamic names for variables! You can create a variable using another variable value as it&#8217;s name</p>
<pre class="lang:default decode:true">$varName = 'newvar';
$$varName = 'abc';

echo $newvar;</pre>
<p>Variable variables can be defined as above or if you want to use an array key as name, you have to use curly brackets to avoid the ambiguity</p>
<pre class="lang:default decode:true">$a = array('hello', 'world');
${$a[1]} = 'value';

echo $world;</pre>
<p>It works with object properties too</p>
<pre class="lang:default decode:true">$var = 'property';
$obj-&gt;$var;

// or even
$obj-&gt;{$start . $stop};</pre>
<p>If this is not too much already, try looking at the <a title="Example #1 - Variable variables - PHP Manual" href="http://php.net/manual/en/language.variables.variable.php" target="_blank" rel="noopener noreferrer">Example #1 in the PHP manual</a></p>
<h3>Variable scope</h3>
<p>Variable scope refers to the availability of variables in different contexts.</p>
<pre class="lang:default decode:true">$globalVar = 1;

function abc(){
  $localVar = 2;
  $globalVar = 2; // this is still local, and it doesn't affect the variable outside the function
}
abc();
echo $globalVar; // echoes 1 !</pre>
<p>Inside functions you can access global variables using the keyword <strong>global</strong></p>
<pre class="lang:default decode:true">$var = 1;

function do_something(){
  global $var;
  $var = 2;
}
do_something();

echo $var; // echoes 2</pre>
<p>Global variables can be accessed using special PHP predefined variable <strong>$GLOBALS</strong></p>
<pre class="lang:default decode:true">$var = 2;

function do_something(){
  $GLOBAL['var'] = 3;
}
do_something();

echo $var; // echoes 3</pre>
<p>Some of the predefined PHP variables are <strong>superglobals</strong> and can be accessed anywhere without the global keyword: $GLOBALS, $_SERVER, $_GET, $_POST, $_FILES, $_COOKIE, $_SESSION, $_REQUEST, $_ENV;</p>
<p>&nbsp;</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Operator Precedence</title>
		<link>/php/zce-training/php-basics/operators/operator-precedence/</link>
		
		<dc:creator><![CDATA[Ovidiu Anicai]]></dc:creator>
		<pubDate>Sat, 15 Dec 2012 18:00:46 +0000</pubDate>
				<category><![CDATA[Operators]]></category>
		<category><![CDATA[operators]]></category>
		<category><![CDATA[order]]></category>
		<category><![CDATA[precedence]]></category>
		<guid isPermaLink="false">http://ovi.ro/?p=161</guid>

					<description><![CDATA[PHP Operators precedence and exceptions &#8230; <a class="more" href="/php/zce-training/php-basics/operators/operator-precedence/">Read more &#187;</a>]]></description>
										<content:encoded><![CDATA[<p>Like in math: 3 + 4 * 5 = 23 and not 35, in PHP you have an order for interpreting the code.</p>
<table class="with-borders" width="780" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col />
<col />
<col width="248" /> </colgroup>
<tbody>
<tr>
<th>Associativity</th>
<th>Operators</th>
<th width="248">Additional Information</th>
</tr>
<tr>
<td>non-associative</td>
<td>clone new</td>
<td width="248">clone<span> and </span><span>new</span></td>
</tr>
<tr>
<td>left</td>
<td>[</td>
<td width="248"><a href="http://php.net/manual/ro/function.array.php">array()</a></td>
</tr>
<tr>
<td>right</td>
<td>++ &#8212; ~ (int) (float) (string) (array) (object) (bool) @</td>
<td width="248">types<span> and </span><span>increment/decrement</span></td>
</tr>
<tr>
<td>non-associative</td>
<td>instanceof</td>
<td width="248"><a href="http://php.net/manual/ro/language.types.php">types</a></td>
</tr>
<tr>
<td>right</td>
<td>!</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>* / %</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.arithmetic.php">arithmetic</a></td>
</tr>
<tr>
<td>left</td>
<td>+ &#8211; .</td>
<td width="248">arithmetic<span> ?i </span><span>string</span></td>
</tr>
<tr>
<td>left</td>
<td>&lt;&lt; &gt;&gt;</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.bitwise.php">bitwise</a></td>
</tr>
<tr>
<td>non-associative</td>
<td>&lt; &lt;= &gt; &gt;=</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.comparison.php">comparison</a></td>
</tr>
<tr>
<td>non-associative</td>
<td>== != === !== &lt;&gt;</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.comparison.php">comparison</a></td>
</tr>
<tr>
<td>left</td>
<td>&amp;</td>
<td width="248">bitwise<span> ?i </span><span>references</span></td>
</tr>
<tr>
<td>left</td>
<td>^</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.bitwise.php">bitwise</a></td>
</tr>
<tr>
<td>left</td>
<td>|</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.bitwise.php">bitwise</a></td>
</tr>
<tr>
<td>left</td>
<td>&amp;&amp;</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>||</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>? :</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.comparison.php#language.operators.comparison.ternary">ternary</a></td>
</tr>
<tr>
<td>right</td>
<td>= += -= *= /= .= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;= =&gt;</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.assignment.php">assignment</a></td>
</tr>
<tr>
<td>left</td>
<td>and</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>xor</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>or</td>
<td width="248"><a href="http://php.net/manual/ro/language.operators.logical.php">logical</a></td>
</tr>
<tr>
<td>left</td>
<td>,</td>
<td width="248">many uses</td>
</tr>
</tbody>
</table>
<p>For operators that have the same precedence, the order is specified in the first column.<br />
PHP also knows about <strong>Asociativity</strong>.</p>
<p>Exception:</p>
<pre class="lang:default decode:true"> if (!$a = foo())</pre>
<p>Even if<strong> = </strong>has lower precedence than other operators (<strong>!</strong> here) the return falue of <strong>foo()</strong> is put into <strong>$a</strong>  before the negation</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
